:py:mod:`helix_fhir_client_sdk.fhir_client`
===========================================

.. py:module:: helix_fhir_client_sdk.fhir_client


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   helix_fhir_client_sdk.fhir_client.WellKnownConfigurationCacheEntry
   helix_fhir_client_sdk.fhir_client.FhirClient




.. py:class:: WellKnownConfigurationCacheEntry

   Bases: :py:obj:`NamedTuple`

   Typed version of namedtuple.

   Usage in Python versions >= 3.6::

       class Employee(NamedTuple):
           name: str
           id: int

   This is equivalent to::

       Employee = collections.namedtuple('Employee', ['name', 'id'])

   The resulting class has extra __annotations__ and _field_types
   attributes, giving an ordered dict mapping field names to types.
   __annotations__ should be preferred, while _field_types
   is kept to maintain pre PEP 526 compatibility. (The field names
   are in the _fields attribute, which is part of the namedtuple
   API.) Alternative equivalent keyword syntax is also accepted::

       Employee = NamedTuple('Employee', name=str, id=int)

   In Python versions <= 3.5 use::

       Employee = NamedTuple('Employee', [('name', str), ('id', int)])

   .. py:attribute:: auth_url
      :annotation: :Optional[str]

      

   .. py:attribute:: last_updated_utc
      :annotation: :datetime.datetime

      


.. py:class:: FhirClient

   Class used to call FHIR server

   .. py:method:: action(self, action)

      :param action: (Optional) do an action e.g., $everything


   .. py:method:: action_payload(self, action_payload)

      :param action_payload: (Optional) if action such as $graph needs a http payload


   .. py:method:: resource(self, resource)

      :param resource: what FHIR resource to retrieve


   .. py:method:: id_(self, id_)


   .. py:method:: url(self, url)

      :param url: server to call for FHIR


   .. py:method:: validation_server_url(self, validation_server_url)

      :param validation_server_url: server to call for FHIR validation


   .. py:method:: additional_parameters(self, additional_parameters)

      :param additional_parameters: Any additional parameters to send with request


   .. py:method:: filter_by_resource(self, filter_by_resource)

      :param filter_by_resource: filter the resource by this. e.g., /Condition?Patient=1
              (resource=Condition, filter_by_resource=Patient)


   .. py:method:: filter_parameter(self, filter_parameter)

      :param filter_parameter: Instead of requesting ?patient=1,
              do ?subject:Patient=1 (if filter_parameter is subject)


   .. py:method:: include_only_properties(self, include_only_properties)

      :param include_only_properties: includes only these properties


   .. py:method:: page_number(self, page_number)

      :param page_number: page number to load


   .. py:method:: page_size(self, page_size)

      :param page_size: (Optional) use paging and get this many items in each page


   .. py:method:: last_updated_after(self, last_updated_after)

      :param last_updated_after: (Optional) Only get records newer than this


   .. py:method:: last_updated_before(self, last_updated_before)

      :param last_updated_before: (Optional) Only get records older than this


   .. py:method:: sort_fields(self, sort_fields)

      :param sort_fields: sort by fields in the resource


   .. py:method:: auth_server_url(self, auth_server_url)

      :param auth_server_url: server url to call to get the authentication token


   .. py:method:: auth_scopes(self, auth_scopes)

      :param auth_scopes: list of scopes to request permission for e.g., system/AllergyIntolerance.read


   .. py:method:: login_token(self, login_token)

      :param login_token: login token to use


   .. py:method:: client_credentials(self, client_id, client_secret)

      Sets client credentials to use when calling the FHIR server


      :param client_id: client_id
      :param client_secret: client_secret
      :return: self


   .. py:method:: logger(self, logger)

      Logger to use for logging calls to the FHIR server


      :param logger: logger


   .. py:method:: adapter(self, adapter)

      Http Adapter to use for calling the FHIR server


      :param adapter: adapter


   .. py:method:: limit(self, limit)

      Limit the results


      :param limit: Limit results to this count


   .. py:method:: access_token(self)
      :property:

      Gets current access token


      :return: access token if any


   .. py:method:: set_access_token(self, value)

      Sets access token


      :param value: access token


   .. py:method:: delete(self)

      Delete the resources


   .. py:method:: separate_bundle_resources(self, separate_bundle_resources)

      Set flag to separate bundle resources


      :param separate_bundle_resources:


   .. py:method:: get(self)

      Issues a GET call


   .. py:method:: get_in_batches(self, fn_handle_batch)

      Retrieves the data in batches (using paging) to reduce load on the FHIR server and to reduce network traffic

      :param fn_handle_batch: function to call for each batch.  Receives a list of resources where each
                                  resource is a dictionary. If this is specified then we don't return
                                  the resources anymore
      :return response containing all the resources received


   .. py:method:: authenticate(self, http, auth_server_url, auth_scopes, login_token)

      Authenticates with an OAuth Provider


      :param http: http session
      :param auth_server_url: url to auth server /token endpoint
      :param auth_scopes: list of scopes to request
      :param login_token: login token to use for authenticating
      :return: access token


   .. py:method:: merge(self, json_data_list)

      Calls $merge function on FHIR server


      :param json_data_list: list of resources to send


   .. py:method:: filter_by_access_tag(self, client_id)

      Restrict results to only records that have an access tag for this client_id


      :param client_id: client id


   .. py:method:: filter_by_source(self, source)

      Restrict results to records with this source

      :param source: source url


   .. py:method:: graph(self, *, graph_definition, contained, process_in_batches = None, fn_handle_batch = None)

      Executes the $graph query on the FHIR server


      :param graph_definition: definition of a graph to execute
      :param contained: whether we should return the related resources as top level list or nest them inside their
                          parent resources in a contained property
      :param process_in_batches: whether to process in batches of size page_size
      :param fn_handle_batch: Optional function to execute on each page of data.  Note that if this is passed we don't
                              return the resources in the response anymore



