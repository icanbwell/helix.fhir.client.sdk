:py:mod:`helix_fhir_client_sdk.fhir_client`
===========================================

.. py:module:: helix_fhir_client_sdk.fhir_client


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   helix_fhir_client_sdk.fhir_client.FhirClient




.. py:class:: FhirClient

   Class used to call FHIR server

   .. py:method:: action(self, action)

      :param action: (Optional) do an action e.g., $everything


   .. py:method:: action_payload(self, action_payload)

      :param action_payload: (Optional) if action such as $graph needs a http payload


   .. py:method:: resource(self, resource)

      :param resource: what FHIR resource to retrieve


   .. py:method:: id_(self, id_)


   .. py:method:: url(self, url)

      :param url: server to call for FHIR


   .. py:method:: validation_server_url(self, validation_server_url)

      :param validation_server_url: server to call for FHIR validation


   .. py:method:: additional_parameters(self, additional_parameters)

      :param additional_parameters: Any additional parameters to send with request


   .. py:method:: filter_by_resource(self, filter_by_resource)

      :param filter_by_resource: filter the resource by this. e.g., /Condition?Patient=1
              (resource=Condition, filter_by_resource=Patient)


   .. py:method:: filter_parameter(self, filter_parameter)

      :param filter_parameter: Instead of requesting ?patient=1,
              do ?subject:Patient=1 (if filter_parameter is subject)


   .. py:method:: include_only_properties(self, include_only_properties)

      :param include_only_properties: includes only these properties


   .. py:method:: page_number(self, page_number)

      :param page_number: page number to load


   .. py:method:: page_size(self, page_size)

      :param page_size: (Optional) use paging and get this many items in each page


   .. py:method:: last_updated_after(self, last_updated_after)

      :param last_updated_after: (Optional) Only get records newer than this


   .. py:method:: last_updated_before(self, last_updated_before)

      :param last_updated_before: (Optional) Only get records older than this


   .. py:method:: sort_fields(self, sort_fields)

      :param sort_fields: sort by fields in the resource


   .. py:method:: auth_server_url(self, auth_server_url)

      :param auth_server_url: server url to call to get the authentication token


   .. py:method:: auth_scopes(self, auth_scopes)

      :param auth_scopes: list of scopes to request permission for e.g., system/AllergyIntolerance.read


   .. py:method:: login_token(self, login_token)

      :param login_token: login token to use


   .. py:method:: client_credentials(self, client_id, client_secret)

      Sets client credentials to use when calling the FHIR server


      :param client_id: client_id
      :param client_secret: client_secret
      :return: self


   .. py:method:: logger(self, logger)

      Logger to use for logging calls to the FHIR server


      :param logger: logger


   .. py:method:: adapter(self, adapter)

      Http Adapter to use for calling the FHIR server


      :param adapter: adapter


   .. py:method:: limit(self, limit)

      Limit the results


      :param limit: Limit results to this count


   .. py:method:: access_token(self)
      :property:

      Gets current access token


      :return: access token if any


   .. py:method:: set_access_token(self, value)

      Sets access token


      :param value: access token


   .. py:method:: delete(self)

      Delete the resources


   .. py:method:: separate_bundle_resources(self, separate_bundle_resources)

      Set flag to separate bundle resources


      :param separate_bundle_resources:


   .. py:method:: get(self)

      Issues a GET call


   .. py:method:: get_in_batches(self, fn_handle_batch)

      Retrieves the data in batches (using paging) to reduce load on the FHIR server and to reduce network traffic

      :param fn_handle_batch: function to call for each batch.  Receives a list of resources where each
                                  resource is a dictionary. If this is specified then we don't return
                                  the resources anymore.  If this function returns False then we stop
                                  processing batches.
      :return response containing all the resources received


   .. py:method:: authenticate(self, http, auth_server_url, auth_scopes, login_token)

      Authenticates with an OAuth Provider


      :param http: http session
      :param auth_server_url: url to auth server /token endpoint
      :param auth_scopes: list of scopes to request
      :param login_token: login token to use for authenticating
      :return: access token


   .. py:method:: merge(self, json_data_list)

      Calls $merge function on FHIR server


      :param json_data_list: list of resources to send


   .. py:method:: filter_by_access_tag(self, client_id)

      Restrict results to only records that have an access tag for this client_id


      :param client_id: client id


   .. py:method:: filter_by_owner_tag(self, client_id)

      Restrict results to only records that have an owner tag for this client_id


      :param client_id: client id


   .. py:method:: filter_by_source(self, source)

      Restrict results to records with this source

      :param source: source url


   .. py:method:: graph(self, *, graph_definition, contained, process_in_batches = None, fn_handle_batch = None)

      Executes the $graph query on the FHIR server


      :param graph_definition: definition of a graph to execute
      :param contained: whether we should return the related resources as top level list or nest them inside their
                          parent resources in a contained property
      :param process_in_batches: whether to process in batches of size page_size
      :param fn_handle_batch: Optional function to execute on each page of data.  Note that if this is passed we don't
                              return the resources in the response anymore.  If this function returns false then we
                              stop processing any further batches.


   .. py:method:: include_total(self, include_total)

      Whether to ask the server to include the total count in the result

      :param include_total: whether to include total count


   .. py:method:: filter_by_identifier(self, system, value)

      Restrict results to only records that have an identifier with this system and value
      Example: system= http://hl7.org/fhir/sid/us-npi, value= 1487831681


      :param system: system of identifier.  Note that this is the assigning system NOT the coding system
      :param value: value of identifier.  This matches the value of the identifier NOT the code


   .. py:method:: filter_by_property(self, property_, value)

      Filters the data where the specified property equals the specified value


      :param property_: property name
      :param value: value to match to


   .. py:method:: filter_by_missing_property(self, property_, missing)

      Filter to find records where the specified property is missing or not missing

      :param property_: name of property
      :param missing: whether we're checking if it is missing or whether we're checking if it is not missing


   .. py:method:: filter(self, filter_)

      Allows adding in a custom filters that derives from BaseFilter


      :param filter_: list of custom filter instances that derives from BaseFilter.


   .. py:method:: filter_by_version(self, version)

      Returns specific version of the resources


      :param version: which version to return



